name: Release Automation

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version type'
        required: true
        default: 'patch'
        type: choice
        options:
        - patch
        - minor
        - major
      create_release:
        description: 'Create GitHub release'
        required: true
        default: true
        type: boolean

permissions:
  contents: write
  pull-requests: write

jobs:
  validate-release:
    name: Validate Release Readiness
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Validate branch
      run: |
        current_branch=$(git rev-parse --abbrev-ref HEAD)
        if [ "$current_branch" != "main" ] && [ "$current_branch" != "HEAD" ]; then
          echo "‚ùå Releases should be created from main branch"
          echo "Current branch: $current_branch"
          exit 1
        fi
        echo "‚úÖ Branch validation passed"
        
    - name: Check for required files
      run: |
        required_files=(
          "README.md"
          "LICENSE"
          "AGENTS.md"
          "CLAUDE.md"
          "PROJECT_STRUCTURE.md"
          "package.json"
          "src/setup.js"
          "src/test-setup.js"
          "scripts/agent-guardrails.sh"
        )
        
        missing_files=()
        for file in "${required_files[@]}"; do
          if [ ! -f "$file" ]; then
            missing_files+=("$file")
          fi
        done
        
        if [ ${#missing_files[@]} -gt 0 ]; then
          echo "‚ùå Missing required files for release:"
          printf '%s\n' "${missing_files[@]}"
          exit 1
        fi
        
        echo "‚úÖ All required files present"
        
    - name: Validate documentation is up to date
      run: |
        # Check if CLAUDE.md mentions current year
        current_year=$(date +%Y)
        if ! grep -q "$current_year" CLAUDE.md 2>/dev/null; then
          echo "‚ö†Ô∏è CLAUDE.md may need date updates"
        fi
        
        # Check if README has proper structure
        if ! grep -q "Quick Start" README.md; then
          echo "‚ö†Ô∏è README.md may be missing Quick Start section"
        fi
        
        echo "‚úÖ Documentation validation completed"

  create-changelog:
    name: Generate Changelog
    runs-on: ubuntu-latest
    needs: validate-release
    outputs:
      changelog: ${{ steps.changelog.outputs.changelog }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Generate changelog
      id: changelog
      run: |
        echo "Generating changelog..."
        
        # Get the latest tag
        latest_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
        
        if [ -n "$latest_tag" ]; then
          echo "Latest tag: $latest_tag"
          # Get commits since last tag
          commits=$(git log ${latest_tag}..HEAD --pretty=format:"- %s" --no-merges)
        else
          echo "No previous tags found, getting all commits"
          # Get all commits
          commits=$(git log --pretty=format:"- %s" --no-merges)
        fi
        
        # Create changelog content
        changelog="## What's Changed\n\n"
        if [ -n "$commits" ]; then
          changelog="${changelog}${commits}\n\n"
        else
          changelog="${changelog}- Initial release\n\n"
        fi
        
        changelog="${changelog}## Framework Components\n\n"
        changelog="${changelog}- ü§ñ AI Agent Guidelines (AGENTS.md) - Comprehensive rules for AI-assisted development\n"
        changelog="${changelog}- üìã Development Commands (CLAUDE.md) - Setup and workflow guidance\n"
        changelog="${changelog}- üõ°Ô∏è Security Guardrails (scripts/agent-guardrails.sh) - Automated code quality checks\n"
        changelog="${changelog}- üìù Prompt Templates - Standardized templates for features, bugfixes, and refactoring\n"
        changelog="${changelog}- üìö Documentation - Architecture guides, contributing guidelines, and examples\n"
        changelog="${changelog}- ‚öôÔ∏è Setup Automation - One-command project initialization\n\n"
        
        changelog="${changelog}## Supported AI Tools\n\n"
        changelog="${changelog}- Windsurf (Cascade, Memories, Supercomplete)\n"
        changelog="${changelog}- Roo Code (Multi-agent collaboration)\n"
        changelog="${changelog}- KiloCode (Open-source orchestration)\n"
        changelog="${changelog}- Any agentic IDE following our conventions\n\n"
        
        # Save to output
        echo "changelog<<EOF" >> $GITHUB_OUTPUT
        echo -e "$changelog" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

  create-release-assets:
    name: Create Release Assets
    runs-on: ubuntu-latest
    needs: validate-release
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Create framework archive
      run: |
        # Create a clean copy for distribution
        mkdir -p release/vibecode-framework
        
        # Copy essential files
        cp -r docs/ release/vibecode-framework/
        cp -r examples/ release/vibecode-framework/
        cp -r prompts/ release/vibecode-framework/
        cp -r policies/ release/vibecode-framework/
        cp -r scripts/ release/vibecode-framework/
        cp -r templates/ release/vibecode-framework/
        cp -r tests/ release/vibecode-framework/
        cp README.md release/vibecode-framework/
        cp AGENTS.md release/vibecode-framework/
        cp CLAUDE.md release/vibecode-framework/
        cp PROJECT_STRUCTURE.md release/vibecode-framework/
        cp LICENSE release/vibecode-framework/
        cp -r src/ release/vibecode-framework/
        cp package.json release/vibecode-framework/
        
        # Create archive
        cd release
        tar -czf vibecode-framework.tar.gz vibecode-framework/
        zip -r vibecode-framework.zip vibecode-framework/
        
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: release-assets
        path: |
          release/vibecode-framework.tar.gz
          release/vibecode-framework.zip

  github-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [validate-release, create-changelog, create-release-assets]
    if: github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && github.event.inputs.create_release == 'true')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download release assets
      uses: actions/download-artifact@v4
      with:
        name: release-assets
        path: release/
        
    - name: Get version
      id: version
      run: |
        if [ "${{ github.event_name }}" == "push" ]; then
          # Extract version from tag
          version=${GITHUB_REF#refs/tags/}
        else
          # Generate version for manual trigger
          latest_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "Latest tag: $latest_tag"
          
          # Remove 'v' prefix and split version
          version_num=${latest_tag#v}
          IFS='.' read -ra VERSION_PARTS <<< "$version_num"
          major=${VERSION_PARTS[0]}
          minor=${VERSION_PARTS[1]:-0}
          patch=${VERSION_PARTS[2]:-0}
          
          # Increment based on input
          case "${{ github.event.inputs.version_type }}" in
            major)
              major=$((major + 1))
              minor=0
              patch=0
              ;;
            minor)
              minor=$((minor + 1))
              patch=0
              ;;
            patch)
              patch=$((patch + 1))
              ;;
          esac
          
          version="v${major}.${minor}.${patch}"
        fi
        
        echo "version=$version" >> $GITHUB_OUTPUT
        
    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.version.outputs.version }}
        release_name: Collaborative Vibecoding Framework ${{ steps.version.outputs.version }}
        body: |
          # Collaborative Vibecoding Framework ${{ steps.version.outputs.version }}
          
          ${{ needs.create-changelog.outputs.changelog }}
          
          ## Installation
          
          1. Download and extract the framework archive
          2. Ensure Node.js (>=18) and pnpm (>=8) are installed
          3. Run `pnpm install` to install dependencies
          4. Run `node src/setup.js` to initialize your project
          5. Customize `AGENTS.md` with your project specifics
          6. Start vibecoding with your favorite AI tool!
          
          ## Documentation
          
          - üìñ [Quick Start Guide](https://github.com/vlobachev/vibecode#quick-start)
          - ü§ñ [AI Agent Guidelines](https://github.com/vlobachev/vibecode/blob/main/AGENTS.md)  
          - üèóÔ∏è [Architecture Overview](https://github.com/vlobachev/vibecode/blob/main/docs/architecture/SYSTEM_ARCHITECTURE.md)
          - ü§ù [Contributing Guide](https://github.com/vlobachev/vibecode/blob/main/docs/guides/CONTRIBUTING.md)
          
          ## What's New
          
          See the changelog above for all improvements and new features in this release.
          
          ---
          
          **Full Changelog**: https://github.com/vlobachev/vibecode/commits/${{ steps.version.outputs.version }}
        draft: false
        prerelease: false
        
    - name: Upload Release Assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: release/vibecode-framework.tar.gz
        asset_name: vibecode-framework.tar.gz
        asset_content_type: application/gzip
        
    - name: Upload ZIP Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: release/vibecode-framework.zip
        asset_name: vibecode-framework.zip
        asset_content_type: application/zip

  update-documentation:
    name: Update Documentation
    runs-on: ubuntu-latest
    needs: github-release
    if: github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && github.event.inputs.create_release == 'true')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Update version references
      run: |
        version="${{ needs.github-release.outputs.version }}"
        current_date=$(date +"%Y-%m-%d")
        
        # Update AGENTS.md footer
        if [ -f "AGENTS.md" ]; then
          sed -i "s/Last updated: .*/Last updated: $current_date/" AGENTS.md
        fi
        
        # Check if there are changes to commit
        if git diff --quiet; then
          echo "No documentation updates needed"
        else
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add AGENTS.md
          git commit -m "Update documentation for release $version"
          git push
        fi

  notify-completion:
    name: Release Completion
    runs-on: ubuntu-latest
    needs: [github-release, update-documentation]
    if: always()
    
    steps:
    - name: Release summary
      run: |
        echo "üéâ Release Process Complete!"
        echo "=========================="
        echo ""
        echo "‚úÖ Release validation"
        echo "‚úÖ Changelog generation"
        echo "‚úÖ Release assets creation"
        echo "‚úÖ GitHub release publication"
        echo "‚úÖ Documentation updates"
        echo ""
        echo "üöÄ Collaborative Vibecoding Framework is ready for the world!"